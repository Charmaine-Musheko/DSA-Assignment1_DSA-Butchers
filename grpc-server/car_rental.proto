syntax = "proto3";
package car_rental;

//Messages
message Car {
    string plate = 1; //unique key
    string make = 2;
    string model = 3;
    int32 year = 4;
    double daily_rate = 5;
    int32 mileage = 6;
    string status = 7; //available / unavailable 
}

message AddCarRequest {
    Car car = 1;
}

message AddCarReply {
    string plate = 1;
    string message = 2;
}

message CreateUserRequest {
    string username = 1;
    string role =2; //customer / admin
    string email =3;
}

message CreateUsersReply {
    int32 created_count = 1;
}

message UpdateCarRequest {
    string plate = 1;
    Car updated = 2; // non-empty/zero fields are applied
}

message UpdateCarReply {
    Car car = 1;
    string message = 2;
}

message RemoveCarRequest {
    string plate = 1;
}

message RemoveCarReply {
    repeated Car cars = 1; //new full list
}

message ListAvailableCarsRequest {
    string filter = 1; //optional filter by make/model or year
}

message SearchCarRequest {
    string plate = 1;
}

message SearchCarReply {
    Car car = 1;
    bool available = 2;
    string message = 3;
}

message AddToCartRequest {
    string username = 1;
    string plate = 2;
    string start_date = 3; //YYYY-MM-DD
    string end_date = 4;   //YYYY-MM-DD
}

message AddToCartReply {
    bool ok = 1;
    string message = 2;
}

message PlaceReservationRequest {
    string username = 1;
}

message Reservation {
    string reservation_id = 1;
    string username = 2;
    string plate = 3;
    string start_date = 4;
    string end_date = 5; //YYYY-MM-DD
    double total_price = 6;
}

message PlaceReservationReply {
    repeated Reservation reservations = 1;
    string message = 2;
}

//Service
service CarRental {
    rpc AddCar (AddCarRequest) returns (AddCarReply);

    //client-side streaming: create multiple users streamed from client
    rpc CreateUsers (stream CreateUserRequest) returns (CreateUsersReply);

    rpc UpdateCar (UpdateCarRequest) returns (UpdateCarReply);
    rpc RemoveCar (RemoveCarRequest) returns (RemoveCarReply);

    //server-side streaming: list all available cars
    rpc ListAvailableCars (ListAvailableCarsRequest) returns (stream Car);

    rpc SearchCar (SearchCarRequest) returns (SearchCarReply); 

    rpc AddToCart (AddToCartRequest) returns (AddToCartReply);

    rpc PlaceReservation (PlaceReservationRequest) returns (PlaceReservationReply);
}
